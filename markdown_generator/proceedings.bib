@inproceedings{Meri14a,
        Annote = {internationalworkshop},
        Abstract = {Software developers often ask questions about software systems and software ecosystems
                                that entail exploration and navigation, such as who uses this component?,
                                and where is this feature implemented?. Software visualisation can be a
                                great aid to understanding and exploring the answers to such questions,
                                but visualisations require expertise to implement effectively, and they
                                do not always scale well to large systems. We propose to automatically
                                generate software visualisations based on software models derived from open
                                source software corpora and from an analysis of the properties of typical
                                developers queries and commonly used visualisations. The key challenges we
                                see are (1) understanding how to match queries to suitable visualisations,
                                and (2) scaling visualisations effectively to very large software systems
                                and corpora. In the paper we motivate the idea of automatic software
                                visualisation, we enumerate the challenges and our proposals to address them,
                                and we describe some very initial results in our attempts to develop scalable
                                visualisations of open source software corpora.},
        Author = {Merino, Leonel},
        Booktitle = {SATToSE'14: Pre-Proceedings of the 7th International Seminar Series on Advanced Techniques \& Tools for Software Evolution},
        Keywords = {scg-pub snf-asa1 skip-doi visualisations merino scg14 jb14},
        PeerReview = {yes},
        Medium = {1},
        Month = jul,
        Pages = {71--74},
        Title = {Adaptable Visualisation Based On User Needs},
        Year = {2014},
        Url = {http://scg.unibe.ch/archive/papers/Meri14a.pdf},
        Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Meri14a.pdf}}

@inproceedings{Meri15a,
        Annote = {internationalworkshop},
        Abstract = {Visualisation provides good support for software analysis. It copes with
        the intangible nature of software by providing concrete representations of it. By
        reducing the complexity of software, visualisations are especially useful when
        dealing with large amounts of code. One domain that usually deals with large amounts
        of source code data is empirical analysis. Although there are many tools for
        analysis and visualisation, they do not cope well software corpora. In this paper we
        present Explora, an infrastructure that is specifically targeted at visualising
        corpora. We report on early results when conducting a sample analysis on Smalltalk
        and Java corpora.},
    Author = {Leonel Merino and Mircea Lungu and Oscar Nierstrasz},
    Booktitle = {SATToSE'14: Post-Proceedings of the 7th International Seminar Series on Advanced Techniques \& Tools for Software Evolution},
        Publisher = {{CEUR} Workshop Proceedings (CEUR-WS.org)},
        Volume = {1354},
        PeerReview = {yes},
        Medium = {1},
        Keywords = {scg-pub skip-doi visualisations merino scg15 jb15 snf-asa1},
        Title = {Explora: Infrastructure for Scaling Up Software Visualisation to Corpora},
    Year = {2015},
    Url = {http://scg.unibe.ch/archive/papers/Meri15a.pdf},
        Note = {http://ceur-ws.org/Vol-1354/},
    Bdsk-Url-1 = {http://scg.unibe.ch/archive/papers/Meri15a.pdf}}

@inproceedings{Meri15b,
        Author    = {Leonel Merino and Mircea Lungu and Oscar Nierstrasz},
        Title     = {Explora: A Visualisation Tool for Metric Analysis of Software Corpora},
        Booktitle = {{VISSOFT}'15: Proceedings of the 3rd IEEE Working Conference on Software Visualization},
        Abstract  = {When analysing software metrics, users find that
                        visualisation tools lack support for (1) the detection of patterns
                        within metrics; and (2) enabling analysis of software corpora.
                        In this paper we present Explora, a visualisation tool designed
                        for the simultaneous analysis of multiple metrics of systems
                        in software corpora. Explora incorporates a novel lightweight
                        visualisation technique called PolyGrid that promotes the detection
                        of graphical patterns. We present an example where we
                        analyse the relation of subtype polymorphism with inheritance
                        and invocation in corpora of Smalltalk and Java systems and
                        find that (1) subtype polymorphism is more likely to be found
                        in large hierarchies; (2) as class hierarchies grow horizontally,
                        they also do so vertically; and (3) in polymorphic hierarchies the
                        length of the name of the classes is orthogonal to the cardinality
                        of the call sites.},
        Annote    = {internationalconference},
        Publisher = {IEEE},
        PeerReview = {yes},
        Medium    = {2},
        Keywords  = {scg-pub snf-asa1 scg15 jb16},
        Pages     = {195--199},
        Doi       = {10.1109/VISSOFT.2015.7332436},
        Year      = {2015},
        Url       = {http://scg.unibe.ch/archive/papers/Meri15b.pdf}}

@inproceedings{Meri16a,
        Author    = {Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz},
        Title     = {Towards Actionable Visualisation in Software Development},
        Booktitle = {{VISSOFT}'16: Proceedings of the 4th IEEE Working Conference on Software Visualization},
        Abstract  = {Although abundant studies have shown how visualisation can help software developers to perform their daily tasks, visualisation is still not a common practice since developers have little support for adopting a proper visualisation for their needs.
In this paper we review the 346 papers published in SOFTVIS/VISSOFT venues and identify 65 design study papers that describe how visualisation is used to alleviate various difficulties in software development. We classify these studies into several problem domains that we collected from the research on software development community, and highlight the characteristics of each study. On the one hand, we support software developers to put visualisation in action by mapping existing techniques to particular needs in various problem domains. On the other hand, we help researchers in the field by exposing domains with little visualisation support. We found a disconnect between the problem domains on which visualisation have focused and the domains that get the most attention from practitioners.},
        Annote    = {internationalconference},
        Publisher = {IEEE},
        PeerReview = {yes},
        Medium    = {2},
        Keywords  = {scg-pub snf-asa2 scg16 jb17},
        Doi       = {10.1109/VISSOFT.2016.10},
        Year      = {2016},
        Url       = {http://scg.unibe.ch/archive/papers/Meri16a.pdf}}

@inproceedings{Meri16b,
        Annote  = {internationalworkshop},
        Author  = {Leonel Merino and Dominik Seliner and Mohammad Ghafari and Oscar Nierstrasz},
        Booktitle = {Proceedings of International Workshop on Smalltalk Technologies (IWST 2016)},
        Abstract = {Understanding the network of collaborations, identifying the key players, potential future collaborators, and trends in the field are very important to carry out a project successfully. In this paper, we present CommunityExplorer, a visualization framework that facilitates presenting, exploring, and understanding the network of collaborations at once. The framework performs data extraction, parsing, and modeling automatically. It is easy to adopt and utilizes a bigraph visualization that scales well. We demonstrate the advantage of CommunityExplorer to identify the collaboration of authors on 346 and 104 research papers published in SOTFVIS/VISSOFT and IWST communities respectively. We found that even though SOFTVIS/VISSOFT has more contributors, IWST exhibits more collaboration. We discovered that contributors in IWST are more resilient than those in SOFTVIS/VISSOFT, which are more volatile. Moreover, collaboration in IWST is concentrated in a single large group, while in SOFTVIS/VISSOFT it is spread among many tiny groups and a few medium-sized ones.},
        Keywords = {scg-pub snf-asa2 scg16 jb16},
        Peerreview = {yes},
        Title   = {CommunityExplorer: A Framework for Visualizing Collaboration Networks},
        Pages = {2:1--2:9},
        Year    = {2016},
        Medium  = {4},
        Doi     = {10.1145/2991041.2991043},
        Url     = {http://scg.unibe.ch/archive/papers/Meri16b.pdf}}

@inproceedings{Meri16c,
        Author    = {Leonel Merino and Mohammad Ghafari and Oscar Nierstrasz and Alexandre Bergel and Juraj Kubelka},
        Title     = {{MetaVis}: Exploring Actionable Visualization},
        Booktitle = {{VISSOFT}'16: Proceedings of the 4th IEEE Working Conference on Software Visualization},
        Abstract  = {Software visualization can be very useful for answering complex questions that arise in the software development process. Although modern visualization engines offer expressive APIs for building such visualizations, developers often have difficulties to (1) identify a suitable visualization technique to answer their particular development question, and to (2) implement that visualization using the existing APIs. Examples that illustrate the usage of an engine to build concrete visualizations offer a good starting point, but developers may have to traverse long lists of categories and analyze examples one-by-one to find a suitable one.
We propose MetaVis, a tool that fills the gap between existing visualization techniques and their practical applications during software development. We classify questions frequently formulated by software developers and for each, based on our expertise, identify suitable visualizations. MetaVis uses tags mined from these questions to offer a tag-iconic cloud-based visualization. Each tag links to suitable visualizations that developers can explore, modify and try out. We present initial results of an implementation of MetaVis in the Pharo programming environment. The tool visualizes 76 developers' questions assigned to 49 visualization examples.},
        Annote    = {internationalconference},
        Publisher = {IEEE},
        PeerReview = {yes},
        Medium    = {2},
        Keywords  = {scg-pub snf-asa2 scg16 jb17},
        Doi       = {10.1109/VISSOFT.2016.19},
        Year      = {2016},
        Url       = {http://scg.unibe.ch/archive/papers/Meri16c.pdf}}


@inproceedings{Meri17b,
        Author    = {Leonel Merino and Johannes Fuchs and Michael Blumenschein and Craig Anslow and Mohammad Ghafari and Oscar Nierstrasz and Michael Behrisch and Daniel Keim},
        Title     = {On the Impact of the Medium in the Effectiveness of {3D} Software Visualization},
        Booktitle = {{VISSOFT}'17: Proceedings of the 5th IEEE Working Conference on Software Visualization},
        Abstract  = {Many visualizations have proven to be effective in supporting various software related tasks. Although multiple media can be used to display a visualization, the standard computer screen is used the most. We hypothesize that the medium has a role in their effectiveness. We investigate our hypotheses by conducting a controlled user experiment. In the experiment we focus on the 3D city visualization technique used for software comprehension tasks. We deploy 3D city visualizations across a standard computer screen (SCS), an immersive 3D environment (I3D), and a physical 3D printed model (P3D). We asked twenty-seven participants (whom we divided in three groups for each medium) to visualize software systems of various sizes, solve a set of uniform comprehension tasks, and complete a questionnaire. We measured the effectiveness of visualizations in terms of performance, recollection, and user experience. We found that even though developers using P3D required the least time to identify outliers, they perceived the least difficulty when visualizing systems based on SCS. Moreover, developers using I3D obtained the highest recollection.},
        Annote    = {internationalconference},
        Medium = {2},
        Keywords  = {scg-pub snf-asa2 scg17 jb18},
        Pages = {11--21},
        Doi = {10.1109/VISSOFT.2017.17},
        Publisher = {IEEE},
        PeerReview = {yes},
        Year      = {2017},
        Url       = {http://scg.unibe.ch/archive/papers/Meri17b.pdf}}

@inproceedings{Meri17c,
        Author    = {Leonel Merino and Mohammad Ghafari and Craig Anslow and Oscar Nierstrasz},
        Title     = {{CityVR}: Gameful Software Visualization},
        Booktitle = {{ICSME}'17: Proceedings of the 33rd IEEE International Conference on Software Maintenance and Evolution (TD Track)},
    Annote    = {internationalconference},
        Abstract  = {Gamification of software engineering tasks improve developer engagement, but has been limited to mechanisms such as points and badges. We believe that a tool that provides developers an interface analogous to computer games can represent the gamification of software engineering tasks more effectively via software visualization. We introduce CityVR -an interactive software visualization tool that implements the city metaphor technique using virtual reality in an immersive 3D environment medium to boost developer engagement in software comprehension tasks. We evaluated our tool with a case study based on ArgoUML. We measured engagement in terms of feelings, interaction, and time perception. We report on how our design choices relate to developer engagement. We found that developers i) felt curious, immersed, in control, excited, and challenged, ii) spent considerable interaction time navigating and selecting elements, and iii) perceived that time passed faster than in reality, and therefore were willing to spend more time using the tool to solve software engineering tasks.},
        Publisher = {IEEE},
        PeerReview = {yes},
        Medium = {2},
        Keywords  = {scg-pub snf-asa2 scg17 jb18},
        Pages = {633--637},
        Doi = {10.1109/ICSME.2017.70},
        Year      = {2017},
        Url       = {http://scg.unibe.ch/archive/papers/Meri17c.pdf}}


@phdthesis{Meri18b,
        Abstract = {Although abundant studies have shown how visualization can help software developers to understand software systems, visualization is still not a common practice since developers (i) have little support to find a proper visualization for their needs, and once they find a suitable visualization tool, they (ii) are unsure of its effectiveness. We aim to offer support for identifying proper visualizations, and to increase the effectiveness of visualization techniques.
In this dissertation, we characterize proposed software visualizations. To fill the gap between proposed visualizations and their practical application, we encapsulate such characteristics in an ontology, and propose a meta-visualization approach to find suitable visualizations. Amongst others characteristics of software visualizations, we identify that the medium used to display them can be a means to increase the effectiveness of visualization techniques for particular comprehension tasks. We implement visualization prototypes and validate our thesis via experiments.
We found that even though developers using a physical 3D model medium required the least time to deal with tasks that involve identifying outliers, they perceived the least difficulty when visualizing systems based on the standard computer screen medium. Moreover, developers using immersive virtual reality obtained the highest recollection.
We conclude that the effectiveness of software visualizations that use the city metaphor to support comprehension tasks can be increased when city visualizations are rendered in an appropriate medium. Furthermore, that visualization of software visualizations can be a suitable means for exploring their multiple characteristics that can be properly encapsulated in an ontology.},
        Author = {Leonel Merino},
        Keywords = {scg-phd snf-asa2 scg18 jb18},
        Month = jun,
        PeerReview = {yes},
        Medium = {2},
        School = {University of Bern},
        Title = {The Medium of Visualization for Software Comprehension},
        Type = {{PhD} thesis},
        Url = {http://scg.unibe.ch/archive/phd/merino-phd.pdf},
        Year = {2018},
        Bdsk-Url-1 = {http://scg.unibe.ch/archive/phd/merino-phd.pdf}
}

@inproceedings{Meri18c,
    Author    = {Leonel Merino and Alexandre Bergel and Oscar Nierstrasz},
    Title     = {Overcoming Issues of 3D Software Visualization through Immersive Augmented Reality},
    Booktitle = {{VISSOFT}'18: Proceedings of the 6th IEEE Working Conference on Software Visualization},
    Abstract  = {Several usability issues (i.e., navigation, occlusion, selection, and text readability) affect the few 3D visualizations proposed to support developers on software engineering tasks. We observe that most 3D software visualizations are displayed on a standard computer screen, and hypothesize that displaying them in immersive augmented reality can help to (i) overcome usability issues of 3D visualizations, and (ii) increase their effectiveness to support software concerns. We investigate our hypothesis via a controlled experiment. In it, nine participants use 3D city visualizations displayed on a Microsoft HoloLens device to complete a set of software comprehension tasks. We further investigate our conjectures through an observational user study, in which the same participants of the experiment use a space-time cube visualization to analyze program executions. We collect data to (1) quantitatively analyze the effectiveness of visualizations in terms of user performance (i.e., completion time, correctness, and recollection), and user experience (i.e., difficulty, and emotions); and (2) qualitatively analyze how immersive augmented reality helps to overcome the limitations of 3D visualizations. We found that immersive augmented reality facilitates navigation and reduces occlusion, while performance is adequate, and developers obtain an outstanding experience. Selection and text readability still remain open issues.},
    Annote    = {internationalconference},
    Keywords  = {scg-pub snf-asa2 scg18 jb19},
    Publisher = {IEEE},
    PeerReview = {yes},
        Medium = {2},
    Year      = {2018},
        Doi       = {10.1109/VISSOFT.2018.00014},
        Pages     = {54--64},
    Url       = {http://scg.unibe.ch/archive/papers/Meri18c.pdf}}

@inproceedings{Meri19a,
 author = {Merino, Leonel and Hess, Mario and Bergel, Alexandre and Nierstrasz, Oscar and Weiskopf, Daniel},
 title = {{PerfVis}: Pervasive Visualization in Immersive Augmented Reality for Performance Awareness},
 abstract = {Developers are usually unaware of the impact of code changes
        to the performance of software systems. Although developers
        can analyze the performance of a system by executing, for
        instance, a performance test to compare the performance of two
        consecutive versions of the system, changing from a
        programming task to a testing task would disrupt the
        development flow. In this paper, we propose the use of a city
        visualization that dynamically provides developers with a
        pervasive view of the continuous performance of a system. We
        use an immersive augmented reality device (Microsoft HoloLens)
        to display our visualization and extend the integrated
        development environment on a computer screen to use the
        physical space. We report on technical details of the design
        and implementation of our visualization tool, and discuss
        early feedback that we collected of its usability. Our
        investigation explores a new visual metaphor to support the
        exploration and analysis of possibly very large and
        multidimensional performance data. Our initial result
        indicates that the city metaphor can be adequate to analyze
        dynamic performance data on a large and non-trivial software
        system.},
 booktitle = {Companion of the 2019 ACM/SPEC International Conference on Performance Engineering},
 series = {ICPE '19},
 year = {2019},
 isbn = {978-1-4503-6286-3},
 location = {Mumbai, India},
 pages = {13--16},
 numpages = {4},
 Url = {http://scg.unibe.ch/archive/papers/Meri19a-perfvis.pdf},
 doi = {10.1145/3302541.3313104},
    PeerReview = {yes},
        Medium = {2},
 acmid = {3313104},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {scg-pub jb19 scg19 snf-asa3 performance engineering, software visualization}}

@inproceedings{Meri19b,
    Author    = {Leonel Merino and Ekaterina Kozlova and Oscar Nierstrasz and Daniel Weiskopf},
    Title     = {{VISON}: An Ontology-Based Approach for Software Visualization Tool Discoverability},
    Booktitle = {{VISSOFT}'19: Proceedings of the 7th IEEE Working Conference on Software Visualization},
    Abstract  = {Although many tools have been presented in the research
                literature of software visualization, there is little
                evidence of their adoption. To choose a suitable
                visualization tool, practitioners need to analyze various
                characteristics of tools such as their supported software
                concerns and level of maturity. Indeed, some of such
                tools can be prototypes for which the lifespan is
                expected to be short, whereas some other tools can be
                fairly mature products that are maintained for a longer
                time. Although such characteristics are often described
                in papers, we conjecture that practitioners willing to
                adopt software visualizations require additional support
                to discover suitable visualization tools. In this paper,
                we elaborate on our efforts to provide such support. To
                this end, we systematically analyzed research papers in
                the literature of software visualization and curated a
                catalog of 70 available tools that employ various
                visualization techniques to support the analysis of
                multiple software concerns. We further encapsulate these
                characteristics in an ontology. VISON, our software
                visualization ontology, captures these semantics as
                concepts and relationships. We report on early results of
                usage scenarios that demonstrate how the ontology can
                support (i) developers to find suitable tools for
                particular development concerns, and (ii) researchers who
                propose new software visualization tools to identify a
                baseline tool for a controlled experiment.},
    Annote    = {internationalconference},
    Keywords  = {scg-pub snf-asa3 scg19 jb20 missing-doi missing-pdf},
    Publisher = {IEEE},
    PeerReview = {yes},
        Medium = {2},
    Year      = {2019}
}



